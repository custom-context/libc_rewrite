#pragma once

#include "rb_tree_set_inheritance_methods_decl.h"
#include "rb_tree_set_types_decl.h"

#define DEFINE_RED_BLACK_TREE_SET_INTERFACE_VTABLE_VARIABLE_WITH_MODIFIER(MODIFIER, TYPE, COMPARATOR, ALLOCATOR)\
    DECLARE_CONTAINER_INTERFACE_VTABLE_VARIABLE_WITH_MODIFIER(MODIFIER,\
        RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR(TYPE, COMPARATOR, ALLOCATOR),\
        SET_INTERFACE_TYPE(TYPE)) = {\
    .destroy_at = &RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, destroy_at),\
    .clear = &RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, clear),\
    .size = &RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, size),\
    /* insert element */\
    .insert_copy = &RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, insert_copy),\
    .insert_move = &RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, insert_move),\
    /* find element */\
    .find = &RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, find),\
    .mut_find = &RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, mut_find),\
    /* erase element */\
    .erase_by_iterator = &RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, erase_by_iterator),\
    .erase_by_const_iterator = &RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, erase_by_const_iterator),\
    /* basic iterators' construction methods */\
    .begin = &RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, begin),\
    .end = &RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, end),\
    .cbegin = &RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, cbegin),\
    .cend = &RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, cend)\
}

#define DEFINE_RED_BLACK_TREE_SET_INTERFACE_ITERATOR_VTABLE_VARIABLE_WITH_MODIFIER(MODIFIER, TYPE, COMPARATOR, ALLOCATOR)\
    DECLARE_CONTAINER_INTERFACE_VTABLE_VARIABLE_WITH_MODIFIER(MODIFIER,\
        RED_BLACK_TREE_SET_ITERATOR_TYPE_WITH_COMPARATOR_AND_ALLOCATOR(TYPE, COMPARATOR, ALLOCATOR),\
        SET_INTERFACE_ITERATOR_TYPE(TYPE)) = {\
    .destroy_at = &RED_BLACK_TREE_SET_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, destroy_at),\
    /* --- Element access functions --- */\
    .value = &RED_BLACK_TREE_SET_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, value),\
    .const_value = &RED_BLACK_TREE_SET_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, const_value),\
    /* --- Compare functions --- */\
    /* return 0 if equals, !0 either */\
    .compare = &RED_BLACK_TREE_SET_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, compare),\
    /* --- Increment functions --- */\
    /* point this to next value & return this-value */\
    .next = &RED_BLACK_TREE_SET_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, next),\
    /* return this-value & point this to next value */\
    .pnext = &RED_BLACK_TREE_SET_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, pnext),\
    /* --- Decrement functions --- */\
    /* point this to previous value & return this-value */\
    .prev = &RED_BLACK_TREE_SET_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, prev),\
    /* return this-value & point this to previous value */\
    .pprev = &RED_BLACK_TREE_SET_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, pprev)\
}


#define DEFINE_RED_BLACK_TREE_SET_CONST_INTERFACE_ITERATOR_VTABLE_VARIABLE_WITH_MODIFIER(MODIFIER, TYPE, COMPARATOR, ALLOCATOR)\
    DECLARE_CONTAINER_INTERFACE_VTABLE_VARIABLE_WITH_MODIFIER(MODIFIER,\
        RED_BLACK_TREE_SET_CONST_ITERATOR_TYPE_WITH_COMPARATOR_AND_ALLOCATOR(TYPE, COMPARATOR, ALLOCATOR),\
        SET_INTERFACE_CONST_ITERATOR_TYPE(TYPE)) = {\
    .destroy_at = &RED_BLACK_TREE_SET_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, destroy_at),\
    /* --- Element access functions --- */\
    .value = &RED_BLACK_TREE_SET_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, value),\
    .const_value = &RED_BLACK_TREE_SET_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, const_value),\
    /* --- Compare functions --- */\
    /* return 0 if equals, !0 either */\
    .compare = &RED_BLACK_TREE_SET_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, compare),\
    /* --- Increment functions --- */\
    /* point this to next value & return this-value */\
    .next = &RED_BLACK_TREE_SET_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, next),\
    /* return this-value & point this to next value */\
    .pnext = &RED_BLACK_TREE_SET_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, pnext),\
    /* --- Decrement functions --- */\
    /* point this to previous value & return this-value */\
    .prev = &RED_BLACK_TREE_SET_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, prev),\
    /* return this-value & point this to previous value */\
    .pprev = &RED_BLACK_TREE_SET_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, pprev)\
}

#define DEFINE_RED_BLACK_TREE_SET_INTERFACE_VTABLES_VARIABLES_WITH_MODIFIER(MODIFIER, TYPE, COMPARATOR, ALLOCATOR)\
    DEFINE_RED_BLACK_TREE_SET_INTERFACE_VTABLE_VARIABLE_WITH_MODIFIER(MODIFIER, TYPE, COMPARATOR, ALLOCATOR);\
    DEFINE_RED_BLACK_TREE_SET_INTERFACE_ITERATOR_VTABLE_VARIABLE_WITH_MODIFIER(MODIFIER, TYPE, COMPARATOR, ALLOCATOR);\
    DEFINE_RED_BLACK_TREE_SET_CONST_INTERFACE_ITERATOR_VTABLE_VARIABLE_WITH_MODIFIER(MODIFIER, TYPE, COMPARATOR, ALLOCATOR)
