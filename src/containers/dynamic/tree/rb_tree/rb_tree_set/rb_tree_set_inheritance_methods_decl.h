#pragma once

#include "rb_tree_set_methods_decl.h"

// set non-dynamic 'dynamic' inner methods
#define DECLARE_RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_AND_MODIFIER_INHERITANCE_METHODS(COMMON_MODIFIER, TYPE, COMPARATOR, ALLOCATOR)\
/* --- Set methods --- */\
/* --- Construction/Destruction functions --- */\
COMMON_MODIFIER void* RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, destroy_at)(\
    struct SET_INTERFACE_TYPE(TYPE)* const this);\
/* --- Common containers' functions --- */\
COMMON_MODIFIER STRUCT_SUBTYPE(SET_INTERFACE_TYPE(TYPE), size_type)\
    RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, size)(\
        struct SET_INTERFACE_TYPE(TYPE) const* const this);\
COMMON_MODIFIER void RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, clear)(\
    struct SET_INTERFACE_TYPE(TYPE)* const this);\
/* --- Elements' manipulation functions --- */\
/* --- --- insert element --- --- */\
COMMON_MODIFIER STRUCT_SUBTYPE(SET_INTERFACE_TYPE(TYPE), iterator_type)\
    RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, insert_copy)(\
        struct SET_INTERFACE_TYPE(TYPE)* const this,\
        TYPE const* const value);\
COMMON_MODIFIER STRUCT_SUBTYPE(SET_INTERFACE_TYPE(TYPE), iterator_type)\
    RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, insert_move)(\
        struct SET_INTERFACE_TYPE(TYPE)* const this,\
        TYPE* const value);\
/* --- --- find element --- --- */\
COMMON_MODIFIER STRUCT_SUBTYPE(SET_INTERFACE_TYPE(TYPE), const_iterator_type)\
    RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, find)(\
        struct SET_INTERFACE_TYPE(TYPE) const* const this,\
        TYPE const* const value);\
COMMON_MODIFIER STRUCT_SUBTYPE(SET_INTERFACE_TYPE(TYPE), iterator_type)\
    RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, mut_find)(\
        struct SET_INTERFACE_TYPE(TYPE)* const this,\
        TYPE const* const value);\
/* --- --- erase element --- --- */\
COMMON_MODIFIER STRUCT_SUBTYPE(SET_INTERFACE_TYPE(TYPE), iterator_type)\
    RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, erase_by_iterator)(\
        struct SET_INTERFACE_TYPE(TYPE)* const this,\
        STRUCT_SUBTYPE(SET_INTERFACE_TYPE(TYPE), iterator_type) iterator);\
COMMON_MODIFIER STRUCT_SUBTYPE(SET_INTERFACE_TYPE(TYPE), iterator_type)\
    RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, erase_by_const_iterator)(\
        struct SET_INTERFACE_TYPE(TYPE)* const this,\
        STRUCT_SUBTYPE(SET_INTERFACE_TYPE(TYPE), const_iterator_type) iterator);\
/* --- Iterators' related methods --- */\
COMMON_MODIFIER STRUCT_SUBTYPE(SET_INTERFACE_TYPE(TYPE), iterator_type)\
    RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, begin)(\
        struct SET_INTERFACE_TYPE(TYPE)* const this);\
COMMON_MODIFIER STRUCT_SUBTYPE(SET_INTERFACE_TYPE(TYPE), iterator_type)\
    RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, end)(\
        struct SET_INTERFACE_TYPE(TYPE)* const this);\
COMMON_MODIFIER STRUCT_SUBTYPE(SET_INTERFACE_TYPE(TYPE), const_iterator_type)\
    RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, cbegin)(\
        struct SET_INTERFACE_TYPE(TYPE) const* const this);\
COMMON_MODIFIER STRUCT_SUBTYPE(SET_INTERFACE_TYPE(TYPE), const_iterator_type)\
    RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, cend)(\
        struct SET_INTERFACE_TYPE(TYPE) const* const this);\
/* --- Mutable iterator's methods --- */\
/* --- Construction/Destruction functions --- */\
COMMON_MODIFIER void* RED_BLACK_TREE_SET_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, destroy_at)(\
    struct SET_INTERFACE_ITERATOR_TYPE(TYPE)* const this);\
/* --- Element access functions --- */\
COMMON_MODIFIER STRUCT_SUBTYPE(SET_INTERFACE_ITERATOR_TYPE(TYPE), value_type)*\
    RED_BLACK_TREE_SET_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, value)(\
        struct SET_INTERFACE_ITERATOR_TYPE(TYPE)* const this);\
COMMON_MODIFIER STRUCT_SUBTYPE(SET_INTERFACE_ITERATOR_TYPE(TYPE), value_type) const*\
    RED_BLACK_TREE_SET_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, const_value)(\
        struct SET_INTERFACE_ITERATOR_TYPE(TYPE) const* const this);\
/* --- Compare functions --- */\
/* return 0 if equals, !0 either */\
COMMON_MODIFIER int RED_BLACK_TREE_SET_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, compare)(\
    struct SET_INTERFACE_ITERATOR_TYPE(TYPE) const* const this,\
    struct SET_INTERFACE_ITERATOR_TYPE(TYPE) const* const source);\
/* --- Increment functions --- */\
/* point this to next value & return this-value */\
COMMON_MODIFIER struct SET_INTERFACE_ITERATOR_TYPE(TYPE)\
    RED_BLACK_TREE_SET_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, next)(\
        struct SET_INTERFACE_ITERATOR_TYPE(TYPE)* const this);\
/* return this-value & point this to next value */\
COMMON_MODIFIER struct SET_INTERFACE_ITERATOR_TYPE(TYPE)\
    RED_BLACK_TREE_SET_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, pnext)(\
        struct SET_INTERFACE_ITERATOR_TYPE(TYPE)* const this);\
/* --- Decrement functions --- */\
/* point this to previous value & return this-value */\
COMMON_MODIFIER struct SET_INTERFACE_ITERATOR_TYPE(TYPE)\
    RED_BLACK_TREE_SET_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, prev)(\
        struct SET_INTERFACE_ITERATOR_TYPE(TYPE)* const this);\
/* return this-value & point this to previous value */\
COMMON_MODIFIER struct SET_INTERFACE_ITERATOR_TYPE(TYPE)\
    RED_BLACK_TREE_SET_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, pprev)(\
        struct SET_INTERFACE_ITERATOR_TYPE(TYPE)* const this);\
/* --- Const iterator's methods --- */\
/* --- Construction/Destruction functions --- */\
COMMON_MODIFIER void* RED_BLACK_TREE_SET_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, destroy_at)(\
    struct SET_INTERFACE_CONST_ITERATOR_TYPE(TYPE)* const this);\
/* --- Element access functions --- */\
COMMON_MODIFIER STRUCT_SUBTYPE(SET_INTERFACE_CONST_ITERATOR_TYPE(TYPE), value_type)*\
    RED_BLACK_TREE_SET_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, value)(\
        struct SET_INTERFACE_CONST_ITERATOR_TYPE(TYPE)* const this);\
COMMON_MODIFIER STRUCT_SUBTYPE(SET_INTERFACE_CONST_ITERATOR_TYPE(TYPE), value_type) const*\
    RED_BLACK_TREE_SET_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, const_value)(\
        struct SET_INTERFACE_CONST_ITERATOR_TYPE(TYPE) const* const this);\
/* --- Compare functions --- */\
/* return 0 if equals, !0 either */\
COMMON_MODIFIER int RED_BLACK_TREE_SET_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, compare)(\
    struct SET_INTERFACE_CONST_ITERATOR_TYPE(TYPE) const* const this,\
    struct SET_INTERFACE_CONST_ITERATOR_TYPE(TYPE) const* const source);\
/* --- Increment functions --- */\
/* point this to next value & return this-value */\
COMMON_MODIFIER struct SET_INTERFACE_CONST_ITERATOR_TYPE(TYPE)\
    RED_BLACK_TREE_SET_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, next)(\
        struct SET_INTERFACE_CONST_ITERATOR_TYPE(TYPE)* const this);\
/* return this-value & point this to next value */\
COMMON_MODIFIER struct SET_INTERFACE_CONST_ITERATOR_TYPE(TYPE)\
    RED_BLACK_TREE_SET_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, pnext)(\
        struct SET_INTERFACE_CONST_ITERATOR_TYPE(TYPE)* const this);\
/* --- Decrement functions --- */\
/* point this to previous value & return this-value */\
COMMON_MODIFIER struct SET_INTERFACE_CONST_ITERATOR_TYPE(TYPE)\
    RED_BLACK_TREE_SET_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, prev)(\
        struct SET_INTERFACE_CONST_ITERATOR_TYPE(TYPE)* const this);\
/* return this-value & point this to previous value */\
COMMON_MODIFIER struct SET_INTERFACE_CONST_ITERATOR_TYPE(TYPE)\
    RED_BLACK_TREE_SET_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(TYPE, COMPARATOR, ALLOCATOR, pprev)(\
        struct SET_INTERFACE_CONST_ITERATOR_TYPE(TYPE)* const this)

#define DECLARE_RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_INHERITANCE_METHODS(TYPE) DECLARE_RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_AND_MODIFIER_INHERITANCE_METHODS(, TYPE, COMPARATOR, ALLOCATOR)
#define DECLARE_RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_STATIC_INHERITANCE_METHODS(TYPE) DECLARE_RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_AND_MODIFIER_INHERITANCE_METHODS(static, TYPE, COMPARATOR, ALLOCATOR)
#define DECLARE_RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_INLINE_INHERITANCE_METHODS(TYPE) DECLARE_RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_AND_MODIFIER_INHERITANCE_METHODS(inline, TYPE, COMPARATOR, ALLOCATOR)
#define DECLARE_RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_EXTERNAL_INHERITANCE_METHODS(TYPE) DECLARE_RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_AND_MODIFIER_INHERITANCE_METHODS(extern, TYPE, COMPARATOR, ALLOCATOR)
#define DECLARE_RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_EXTERNAL_INLINE_INHERITANCE_METHODS(TYPE) DECLARE_RED_BLACK_TREE_SET_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_AND_MODIFIER_INHERITANCE_METHODS(extern inline, TYPE, COMPARATOR, ALLOCATOR)
