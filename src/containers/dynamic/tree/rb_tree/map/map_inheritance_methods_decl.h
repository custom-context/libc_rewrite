#pragma once

#include "map_methods_decl.h"

// set non-dynamic 'dynamic' inner methods
#define DECLARE_RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_AND_MODIFIER_INHERITANCE_METHODS(COMMON_MODIFIER, KEY, VALUE, COMPARATOR, ALLOCATOR)\
/* --- Set methods --- */\
/* --- Construction/Destruction functions --- */\
COMMON_MODIFIER void*\
    RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(destroy_at))(\
        struct MAP_INTERFACE_TYPE(KEY, VALUE)* const this);\
/* --- Common containers' functions --- */\
COMMON_MODIFIER STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), size_type)\
    RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(size))(\
        struct MAP_INTERFACE_TYPE(KEY, VALUE) const* const this);\
COMMON_MODIFIER void RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(clear))(\
    struct MAP_INTERFACE_TYPE(KEY, VALUE)* const this);\
/* --- Elements' manipulation functions --- */\
/* --- --- insert element --- --- */\
COMMON_MODIFIER struct PAIR_TYPE(MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE), char)\
    RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(insert_copy))(\
        struct MAP_INTERFACE_TYPE(KEY, VALUE)* const this,\
        STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), value_type) const* const value);\
COMMON_MODIFIER struct PAIR_TYPE(MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE), char)\
    RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(insert_move))(\
        struct MAP_INTERFACE_TYPE(KEY, VALUE)* const this,\
        STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), value_type)* const value);\
/* --- --- insert or assign key-value --- --- */\
COMMON_MODIFIER struct PAIR_TYPE(MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE), char)\
    RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(insert_or_assign_with_key_copy_value_copy))(\
        struct MAP_INTERFACE_TYPE(KEY, VALUE)* const this,\
        STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), key_type) const* const key,\
        STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), mapped_type) const* const value);\
COMMON_MODIFIER struct PAIR_TYPE(MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE), char)\
    RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(insert_or_assign_with_key_move_value_copy))(\
        struct MAP_INTERFACE_TYPE(KEY, VALUE)* const this,\
        STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), key_type)* const key,\
        STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), mapped_type) const* const value);\
COMMON_MODIFIER struct PAIR_TYPE(MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE), char)\
    RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(insert_or_assign_with_key_copy_value_move))(\
        struct MAP_INTERFACE_TYPE(KEY, VALUE)* const this,\
        STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), key_type) const* const key,\
        STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), mapped_type)* const value);\
COMMON_MODIFIER struct PAIR_TYPE(MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE), char)\
    RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(insert_or_assign_with_key_move_value_move))(\
        struct MAP_INTERFACE_TYPE(KEY, VALUE)* const this,\
        STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), key_type)* const key,\
        STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), mapped_type)* const value);\
/* --- --- direct value access by key --- --- */\
COMMON_MODIFIER STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), mapped_type) const*\
    RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(at))(\
        struct MAP_INTERFACE_TYPE(KEY, VALUE) const* const this,\
        KEY const* const key);\
COMMON_MODIFIER STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), mapped_type)*\
    RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(mut_at))(\
        struct MAP_INTERFACE_TYPE(KEY, VALUE)* const this,\
        KEY const* const key);\
/* --- --- find element by key --- --- */\
COMMON_MODIFIER STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), const_iterator_type)\
    RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(find))(\
        struct MAP_INTERFACE_TYPE(KEY, VALUE) const* const this,\
        KEY const* const key);\
COMMON_MODIFIER STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), iterator_type)\
    RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(mut_find))(\
        struct MAP_INTERFACE_TYPE(KEY, VALUE)* const this,\
        KEY const* const key);\
/* --- --- erase element --- --- */\
COMMON_MODIFIER STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), iterator_type)\
    RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(erase_by_iterator))(\
        struct MAP_INTERFACE_TYPE(KEY, VALUE)* const this,\
        STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), iterator_type) iterator);\
COMMON_MODIFIER STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), iterator_type)\
    RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(erase_by_const_iterator))(\
        struct MAP_INTERFACE_TYPE(KEY, VALUE)* const this,\
        STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), const_iterator_type) iterator);\
/* --- Iterators' related methods --- */\
COMMON_MODIFIER STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), iterator_type)\
    RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(begin))(\
        struct MAP_INTERFACE_TYPE(KEY, VALUE)* const this);\
COMMON_MODIFIER STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), iterator_type)\
    RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(end))(\
        struct MAP_INTERFACE_TYPE(KEY, VALUE)* const this);\
COMMON_MODIFIER STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), const_iterator_type)\
    RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(cbegin))(\
        struct MAP_INTERFACE_TYPE(KEY, VALUE) const* const this);\
COMMON_MODIFIER STRUCT_SUBTYPE(MAP_INTERFACE_TYPE(KEY, VALUE), const_iterator_type)\
    RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(cend))(\
        struct MAP_INTERFACE_TYPE(KEY, VALUE) const* const this);\
/* --- Mutable iterator's methods --- */\
/* --- Construction/Destruction functions --- */\
COMMON_MODIFIER void*\
    RED_BLACK_TREE_MAP_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(destroy_at))(\
        struct MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE)* const this);\
/* --- Element access functions --- */\
COMMON_MODIFIER STRUCT_SUBTYPE(MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE), key_type) const*\
    RED_BLACK_TREE_MAP_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(key))(\
        struct MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE) const* const this);\
COMMON_MODIFIER STRUCT_SUBTYPE(MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE), mapped_type)*\
    RED_BLACK_TREE_MAP_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(value))(\
        struct MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE)* const this);\
COMMON_MODIFIER STRUCT_SUBTYPE(MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE), mapped_type) const*\
    RED_BLACK_TREE_MAP_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(const_value))(\
        struct MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE) const* const this);\
/* --- Compare functions --- */\
/* return 0 if equals, !0 either */\
COMMON_MODIFIER int RED_BLACK_TREE_MAP_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(compare))(\
    struct MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE) const* const this,\
    struct MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE) const* const source);\
/* --- Increment functions --- */\
/* point this to next value & return this-value */\
COMMON_MODIFIER struct MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE)\
    RED_BLACK_TREE_MAP_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(next))(\
        struct MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE)* const this);\
/* return this-value & point this to next value */\
COMMON_MODIFIER struct MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE)\
    RED_BLACK_TREE_MAP_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(pnext))(\
        struct MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE)* const this);\
/* --- Decrement functions --- */\
/* point this to previous value & return this-value */\
COMMON_MODIFIER struct MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE)\
    RED_BLACK_TREE_MAP_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(prev))(\
        struct MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE)* const this);\
/* return this-value & point this to previous value */\
COMMON_MODIFIER struct MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE)\
    RED_BLACK_TREE_MAP_TYPE_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(pprev))(\
        struct MAP_INTERFACE_ITERATOR_TYPE(KEY, VALUE)* const this);\
/* --- Const iterator's methods --- */\
/* --- Construction/Destruction functions --- */\
COMMON_MODIFIER void* RED_BLACK_TREE_MAP_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(destroy_at))(\
    struct MAP_INTERFACE_CONST_ITERATOR_TYPE(KEY, VALUE)* const this);\
/* --- Element access functions --- */\
COMMON_MODIFIER STRUCT_SUBTYPE(MAP_INTERFACE_CONST_ITERATOR_TYPE(KEY, VALUE), key_type) const*\
    RED_BLACK_TREE_MAP_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(key))(\
        struct MAP_INTERFACE_CONST_ITERATOR_TYPE(KEY, VALUE) const* const this);\
COMMON_MODIFIER STRUCT_SUBTYPE(MAP_INTERFACE_CONST_ITERATOR_TYPE(KEY, VALUE), mapped_type)*\
    RED_BLACK_TREE_MAP_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(value))(\
        struct MAP_INTERFACE_CONST_ITERATOR_TYPE(KEY, VALUE)* const this);\
COMMON_MODIFIER STRUCT_SUBTYPE(MAP_INTERFACE_CONST_ITERATOR_TYPE(KEY, VALUE), mapped_type) const*\
    RED_BLACK_TREE_MAP_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(const_value))(\
        struct MAP_INTERFACE_CONST_ITERATOR_TYPE(KEY, VALUE) const* const this);\
/* --- Compare functions --- */\
/* return 0 if equals, !0 either */\
COMMON_MODIFIER int RED_BLACK_TREE_MAP_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(compare))(\
    struct MAP_INTERFACE_CONST_ITERATOR_TYPE(KEY, VALUE) const* const this,\
    struct MAP_INTERFACE_CONST_ITERATOR_TYPE(KEY, VALUE) const* const source);\
/* --- Increment functions --- */\
/* point this to next value & return this-value */\
COMMON_MODIFIER struct MAP_INTERFACE_CONST_ITERATOR_TYPE(KEY, VALUE)\
    RED_BLACK_TREE_MAP_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(next))(\
        struct MAP_INTERFACE_CONST_ITERATOR_TYPE(KEY, VALUE)* const this);\
/* return this-value & point this to next value */\
COMMON_MODIFIER struct MAP_INTERFACE_CONST_ITERATOR_TYPE(KEY, VALUE)\
    RED_BLACK_TREE_MAP_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(pnext))(\
        struct MAP_INTERFACE_CONST_ITERATOR_TYPE(KEY, VALUE)* const this);\
/* --- Decrement functions --- */\
/* point this to previous value & return this-value */\
COMMON_MODIFIER struct MAP_INTERFACE_CONST_ITERATOR_TYPE(KEY, VALUE)\
    RED_BLACK_TREE_MAP_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(prev))(\
        struct MAP_INTERFACE_CONST_ITERATOR_TYPE(KEY, VALUE)* const this);\
/* return this-value & point this to previous value */\
COMMON_MODIFIER struct MAP_INTERFACE_CONST_ITERATOR_TYPE(KEY, VALUE)\
    RED_BLACK_TREE_MAP_TYPE_CONST_ITERATOR_WITH_COMPARATOR_AND_ALLOCATOR_METHOD(KEY, VALUE, COMPARATOR, ALLOCATOR, VTABLE_MEMBER(pprev))(\
        struct MAP_INTERFACE_CONST_ITERATOR_TYPE(KEY, VALUE)* const this)

#define DECLARE_RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_INHERITANCE_METHODS(KEY, VALUE, COMPARATOR, ALLOCATOR) DECLARE_RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_AND_MODIFIER_INHERITANCE_METHODS(, KEY, VALUE, COMPARATOR, ALLOCATOR)
#define DECLARE_RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_STATIC_INHERITANCE_METHODS(KEY, VALUE, COMPARATOR, ALLOCATOR) DECLARE_RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_AND_MODIFIER_INHERITANCE_METHODS(static, KEY, VALUE, COMPARATOR, ALLOCATOR)
#define DECLARE_RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_INLINE_INHERITANCE_METHODS(KEY, VALUE, COMPARATOR, ALLOCATOR) DECLARE_RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_AND_MODIFIER_INHERITANCE_METHODS(inline, KEY, VALUE, COMPARATOR, ALLOCATOR)
#define DECLARE_RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_EXTERNAL_INHERITANCE_METHODS(KEY, VALUE, COMPARATOR, ALLOCATOR) DECLARE_RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_AND_MODIFIER_INHERITANCE_METHODS(extern, KEY, VALUE, COMPARATOR, ALLOCATOR)
#define DECLARE_RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_EXTERNAL_INLINE_INHERITANCE_METHODS(KEY, VALUE, COMPARATOR, ALLOCATOR) DECLARE_RED_BLACK_TREE_MAP_TYPE_WITH_COMPARATOR_AND_ALLOCATOR_AND_MODIFIER_INHERITANCE_METHODS(extern inline, KEY, VALUE, COMPARATOR, ALLOCATOR)
