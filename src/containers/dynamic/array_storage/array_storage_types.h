#pragma once

#include <containers/dynamic/common.h>

// dynamic array storage type
#define DYNAMIC_ARRAY_STORAGE_TYPE__ALLOCATOR(TYPE, ALLOCATOR) NAMESPACE_CONTAINERS_DYNAMIC(CONCAT7(array, __, TYPE, _, with_allocator, _, ALLOCATOR))
#define DYNAMIC_ARRAY_STORAGE_TYPE(TYPE) DYNAMIC_ARRAY_STORAGE_TYPE__ALLOCATOR(TYPE, DEFAULT_ALLOCATOR_TYPE(TYPE))

// dynamic array storage type declarations
#define DECLARE_DYNAMIC_ARRAY_STORAGE_TYPE__ALLOCATOR(TYPE, ALLOCATOR)\
/* dynamic array storage type */\
DECLARE_STRUCT_SUBTYPE(DYNAMIC_ARRAY_STORAGE_TYPE__ALLOCATOR(TYPE, ALLOCATOR), storage_type, TYPE);\
DECLARE_STRUCT_SUBTYPE(DYNAMIC_ARRAY_STORAGE_TYPE__ALLOCATOR(TYPE, ALLOCATOR), size_type, usize);\
DECLARE_STRUCT_SUBTYPE(DYNAMIC_ARRAY_STORAGE_TYPE__ALLOCATOR(TYPE, ALLOCATOR), allocator_type, ALLOCATOR);\
typedef struct DYNAMIC_ARRAY_STORAGE_TYPE__ALLOCATOR(TYPE, ALLOCATOR) {\
    STRUCT_SUBTYPE(DYNAMIC_ARRAY_STORAGE_TYPE__ALLOCATOR(TYPE, ALLOCATOR), storage_type)* storage;\
    STRUCT_SUBTYPE(DYNAMIC_ARRAY_STORAGE_TYPE__ALLOCATOR(TYPE, ALLOCATOR), size_type) capacity;\
    STRUCT_SUBTYPE(DYNAMIC_ARRAY_STORAGE_TYPE__ALLOCATOR(TYPE, ALLOCATOR), allocator_type) allocator;\
} DYNAMIC_ARRAY_STORAGE_TYPE__ALLOCATOR(TYPE, ALLOCATOR)

#define DECLARE_DYNAMIC_ARRAY_STORAGE_TYPE(TYPE) DECLARE_DYNAMIC_ARRAY_STORAGE_TYPE__ALLOCATOR(TYPE, DEFAULT_ALLOCATOR_TYPE(TYPE))
