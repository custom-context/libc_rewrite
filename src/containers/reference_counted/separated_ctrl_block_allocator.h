#pragma once

#include "separated_ctrl_block_common.h"
#include <memory/allocator/allocator.h>
#include <memory/native/native.h>

/// struct DEFAULT_ALLOCATOR_TYPE(DefaultSeparatedCtrlBlock<Type, StrongRC, WeakRC>)
#define DEFINE_ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)\
DECLARE_STRUCT_SUBTYPE(ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC), value_type, TYPE);\
typedef struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC) {\
    char bit: 1;\
} ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)
/// struct DEFAULT_ALLOCATOR_TYPE(DefaultSeparatedCtrlBlock<Type, StrongRC=usize, WeakRC=usize>)
#define DEFINE_ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK(TYPE)\
    DEFINE_ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, usize, usize)

/// DEFAULT_ALLOCATOR_TYPE(DefaultSeparatedCtrlBlock<Type, StrongRC, WeakRC>) methods
#define DECLARE_ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC_METHODS_WITH_MODIFIER(MODIFIER, TYPE, STRONG_RC, WEAK_RC)\
DECLARE_DEFAULT_LIFECYCLE_METHODS_WITH_MODIFIER(MODIFIER, ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC));\
struct RC_DEFAULT_SEPARATED_CTRL_BLOCK_TYPE__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC);\
typedef struct RC_DEFAULT_SEPARATED_CTRL_BLOCK_TYPE__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)\
    RC_DEFAULT_SEPARATED_CTRL_BLOCK_TYPE__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC);\
/* --- Memory managment functions implementation --- */\
MODIFIER RC_DEFAULT_SEPARATED_CTRL_BLOCK_TYPE__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)*\
    ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC_METHOD(TYPE, STRONG_RC, WEAK_RC, allocate)(\
        struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const this,\
        usize count_of_elements);\
MODIFIER void\
    ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC_METHOD(TYPE, STRONG_RC, WEAK_RC, deallocate)(\
        struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const this,\
        RC_DEFAULT_SEPARATED_CTRL_BLOCK_TYPE__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const elements_buffer,\
        usize count_of_elements);\
MODIFIER RC_DEFAULT_SEPARATED_CTRL_BLOCK_TYPE__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)*\
    ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC_METHOD(TYPE, STRONG_RC, WEAK_RC, reallocate)(\
        struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const this,\
        RC_DEFAULT_SEPARATED_CTRL_BLOCK_TYPE__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const elements_buffer,\
        usize count_of_elements,\
        usize new_count_of_elements)

/// DEFAULT_ALLOCATOR_TYPE(DefaultSeparatedCtrlBlock<Type, StrongRC=usize, WeakRC=usize>) methods
#define DECLARE_ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK_METHODS_WITH_MODIFIER(MODIFIER, TYPE)\
    DECLARE_ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC_METHODS_WITH_MODIFIER(MODIFIER, TYPE, usize, usize)

/// DEFAULT_ALLOCATOR_TYPE(DefaultSeparatedCtrlBlock<Type, StrongRC, WeakRC>) methods definition
#define DEFINE_ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC_METHODS_WITH_MODIFIER(MODIFIER, TYPE, STRONG_RC, WEAK_RC)\
/* --- Construction/Destruction functions implementation --- */\
MODIFIER struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)*\
    ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC_METHOD(TYPE, STRONG_RC, WEAK_RC, construct_at)(\
        struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const this) {\
    return this;\
}\
MODIFIER struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)*\
    ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC_METHOD(TYPE, STRONG_RC, WEAK_RC, construct_copy_at)(\
        struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const this,\
        struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC) const* const source) {\
    UNUSED(source);\
    return this;\
}\
MODIFIER struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)*\
    ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC_METHOD(TYPE, STRONG_RC, WEAK_RC, construct_move_at)(\
        struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const this,\
        struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const source) {\
    UNUSED(source);\
    return this;\
}\
MODIFIER void*\
    ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC_METHOD(TYPE, STRONG_RC, WEAK_RC, destroy_at)(\
        struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const this) {\
    return this;\
}\
/* --- Assign functions --- */\
MODIFIER struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)*\
    ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC_METHOD(TYPE, STRONG_RC, WEAK_RC, assign_copy_at)(\
        struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const this,\
        struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC) const* const source) {\
    UNUSED(source);\
    return this;\
}\
MODIFIER struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)*\
    ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC_METHOD(TYPE, STRONG_RC, WEAK_RC, assign_move_at)(\
        struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const this,\
        struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const source) {\
    UNUSED(source);\
    return this;\
}\
/* --- Swap --- */\
MODIFIER void\
    ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC_METHOD(TYPE, STRONG_RC, WEAK_RC, swap)(\
        struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const this,\
        struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const another) {\
    UNUSED(this);\
    UNUSED(another);\
}\
/* --- Memory managment functions implementation --- */\
MODIFIER RC_DEFAULT_SEPARATED_CTRL_BLOCK_TYPE__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)*\
    ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC_METHOD(TYPE, STRONG_RC, WEAK_RC, allocate)(\
        struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const this,\
        usize count_of_elements) {\
    UNUSED(this);\
    return NAMESPACE_MEMORY_NATIVE(aligned_alloc)(\
        ALIGNOF(RC_DEFAULT_SEPARATED_CTRL_BLOCK_TYPE__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)),\
        count_of_elements * sizeof(RC_DEFAULT_SEPARATED_CTRL_BLOCK_TYPE__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)));\
}\
MODIFIER void\
    ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC_METHOD(TYPE, STRONG_RC, WEAK_RC, deallocate)(\
        struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const this,\
        RC_DEFAULT_SEPARATED_CTRL_BLOCK_TYPE__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const elements_buffer,\
        usize count_of_elements) {\
    UNUSED(this);\
    UNUSED(count_of_elements);\
    NAMESPACE_MEMORY_NATIVE(aligned_free)(elements_buffer);\
}\
MODIFIER RC_DEFAULT_SEPARATED_CTRL_BLOCK_TYPE__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)*\
    ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC_METHOD(TYPE, STRONG_RC, WEAK_RC, reallocate)(\
        struct ALLOCATOR_TYPE__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const this,\
        RC_DEFAULT_SEPARATED_CTRL_BLOCK_TYPE__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)* const elements_buffer,\
        usize count_of_elements,\
        usize new_count_of_elements) {\
    UNUSED(this);\
    UNUSED(count_of_elements);\
    return NAMESPACE_MEMORY_NATIVE(aligned_realloc)(\
        elements_buffer,\
        ALIGNOF(RC_DEFAULT_SEPARATED_CTRL_BLOCK_TYPE__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC)),\
        new_count_of_elements * sizeof(RC_DEFAULT_SEPARATED_CTRL_BLOCK_TYPE__STRONG_RC__WEAK_RC(TYPE, STRONG_RC, WEAK_RC))\
    );\
}

/// DEFAULT_ALLOCATOR_TYPE(DefaultSeparatedCtrlBlock<Type, StrongRC=usize, WeakRC=usize>) methods definition
#define DEFINE_ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK_METHODS_WITH_MODIFIER(MODIFIER, TYPE)\
    DEFINE_ALLOCATOR__RC_DEFAULT_SEPARATED_CTRL_BLOCK__STRONG_RC__WEAK_RC_METHODS_WITH_MODIFIER(MODIFIER, TYPE, usize, usize)

