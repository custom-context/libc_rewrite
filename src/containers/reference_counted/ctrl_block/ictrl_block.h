#pragma once

#include <containers/reference_counted/common.h>

/// rc<*, StrongRC, WeakRC>::CtrlBlockInterface
#define RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)\
    TYPE_MEMBER(RC_TYPE__STRONG_RC__WEAK_RC(, STRONG_RC, WEAK_RC), INTERFACE_TYPE(ctrl_block))
/// rc<*, StrongRC=usize, WeakRC=usize>::CtrlBlockInterface
#define RC_CTRL_BLOCK_INTERFACE_TYPE()\
    RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(usize, usize)
///
/// rc<*, StrongRC, WeakRC>::CtrlBlockInterface::*METHOD
#define RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC_METHOD(STRONG_RC, WEAK_RC, METHOD)\
    TYPE_METHOD(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC), METHOD)
/// rc<*, StrongRC=usize, WeakRC=usize>::CtrlBlockInterface::*METHOD
#define RC_CTRL_BLOCK_INTERFACE_METHOD(METHOD)\
    RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC_METHOD(usize, usize, METHOD)


/// struct rc<*, StrongRC, WeakRC>::CtrlBlockInterface::vtable
#define DEFINE_RC_CTRL_BLOCK_INTERFACE_VTABLE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)\
struct RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC);\
typedef struct INTERFACE_VTABLE_TYPE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)) {\
    void (*dispose_value)(struct RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)* const this);/* = NULL */\
    void (*dispose_this)(struct RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)* const this);/* = NULL */\
    void* (*destroy_at)(struct RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)* const this);/* = default */\
} INTERFACE_VTABLE_TYPE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC))
/// struct rc<*, StrongRC, WeakRC>::CtrlBlockInterface::vtable variable
#define DECLARE_RC_CTRL_BLOCK_INTERFACE_VTABLE_VARIABLE__STRONG_RC__WEAK_RC_WITH_MODIFIER(MODIFIER, STRONG_RC, WEAK_RC)\
    DECLARE_INTERFACE_VTABLE_VARIABLE_WITH_MODIFIER(MODIFIER, RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC))
///
/// struct rc<*, StrongRC=usize, WeakRC=usize>::CtrlBlockInterface::vtable
#define DEFINE_RC_CTRL_BLOCK_INTERFACE_VTABLE_TYPE()\
    DEFINE_RC_CTRL_BLOCK_INTERFACE_VTABLE_TYPE__STRONG_RC__WEAK_RC(usize, usize)
/// struct rc<*, StrongRC=usize, WeakRC=usize>::CtrlBlockInterface::vtable variable
#define DECLARE_RC_CTRL_BLOCK_INTERFACE_VTABLE_VARIABLE_WITH_MODIFIER(MODIFIER)\
    DECLARE_RC_CTRL_BLOCK_INTERFACE_VTABLE_VARIABLE__STRONG_RC__WEAK_RC_WITH_MODIFIER(MODIFIER, usize, usize)

/// struct rc<*, StrongRC, WeakRC>::CtrlBlockInterface
#define DEFINE_RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)\
DECLARE_STRUCT_SUBTYPE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC), strong_rc_type, STRONG_RC);\
DECLARE_STRUCT_SUBTYPE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC), weak_rc_type, WEAK_RC);\
typedef struct RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC) {\
    DEFINE_INTERFACE_VTABLE_ADAPTER(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC));\
    STRUCT_SUBTYPE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC), strong_rc_type) strong_rc;\
    STRUCT_SUBTYPE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC), weak_rc_type) weak_rc;\
} RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)
/// struct rc<*, StrongRC=usize, WeakRC=usize>::CtrlBlockInterface
#define DEFINE_RC_CTRL_BLOCK_INTERFACE_TYPE()\
    DEFINE_RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(usize, usize)
///
/// struct rc<*, StrongRC, WeakRC>::CtrlBlockInterface methods
#define DECLARE_RC_CTRL_BLOCK_INTERFACE__STRONG_RC__WEAK_RC_METHODS_WITH_MODIFIER(MODIFIER, STRONG_RC, WEAK_RC)\
DECLARE_DEFAULT_LIFECYCLE_METHODS_WITH_MODIFIER(MODIFIER, RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC));\
MODIFIER void\
    RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC_METHOD(STRONG_RC, WEAK_RC, dispose_value)(\
        struct RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)* const this);\
MODIFIER void\
    RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC_METHOD(STRONG_RC, WEAK_RC, dispose_this)(\
        struct RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)* const this);\
MODIFIER void*\
    RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC_METHOD(STRONG_RC, WEAK_RC, VTABLE_MEMBER(destroy_at))(\
        struct RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)* const this)
/// struct rc<*, StrongRC=usize, WeakRC=usize>::CtrlBlockInterface methods
#define DECLARE_RC_CTRL_BLOCK_INTERFACE_METHODS_WITH_MODIFIER(MODIFIER)\
    DECLARE_RC_CTRL_BLOCK_INTERFACE__STRONG_RC__WEAK_RC_METHODS_WITH_MODIFIER(MODIFIER, usize, usize)

/// struct rc<*, StrongRC, WeakRC>::CtrlBlockInterface::vtable variable init
#define DEFINE_RC_CTRL_BLOCK_INTERFACE_VTABLE_VARIABLE__STRONG_RC__WEAK_RC_WITH_MODIFIER(MODIFIER, STRONG_RC, WEAK_RC)\
    DECLARE_INTERFACE_VTABLE_VARIABLE_WITH_MODIFIER(MODIFIER, RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)) = {\
        .dispose_value = NULL,\
        .dispose_this = NULL,\
        .destroy_at = RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC_METHOD(STRONG_RC, WEAK_RC, VTABLE_MEMBER(destroy_at))\
    }
/// struct rc<*, StrongRC=usize, WeakRC=usize>::CtrlBlockInterface::vtable variable init
#define DEFINE_RC_CTRL_BLOCK_INTERFACE_VTABLE_VARIABLE_WITH_MODIFIER(MODIFIER)\
    DEFINE_RC_CTRL_BLOCK_INTERFACE_VTABLE_VARIABLE__STRONG_RC__WEAK_RC_WITH_MODIFIER(MODIFIER, usize, usize)

/// struct rc<*, StrongRC, WeakRC>::CtrlBlockInterface methods definition
#define DEFINE_RC_CTRL_BLOCK_INTERFACE__STRONG_RC__WEAK_RC_METHODS_WITH_MODIFIER(MODIFIER, STRONG_RC, WEAK_RC)\
MODIFIER RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)*\
    RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC_METHOD(STRONG_RC, WEAK_RC, construct_at)(\
        RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)* const this) {\
    ASSERT(this);\
    this->INTERFACE_VTABLE_VARIABLE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)) =\
        &INTERFACE_VTABLE_STATIC_VARIABLE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC));\
    this->strong_rc = 1u;\
    this->weak_rc = 0u;\
    return this;\
}\
MODIFIER RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)*\
    RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC_METHOD(STRONG_RC, WEAK_RC, construct_copy_at)(\
        RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)* const this,\
        RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC) const* const src) {\
    ASSERT(this);\
    ASSERT(src);\
    this->INTERFACE_VTABLE_VARIABLE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)) =\
        &INTERFACE_VTABLE_STATIC_VARIABLE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC));\
    this->strong_rc = src->strong_rc;\
    this->weak_rc = src->weak_rc;\
    return this;\
}\
MODIFIER RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)*\
    RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC_METHOD(STRONG_RC, WEAK_RC, construct_move_at)(\
        RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)* const this,\
        RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)* const src) {\
    ASSERT(this);\
    ASSERT(src);\
    this->INTERFACE_VTABLE_VARIABLE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)) =\
        &INTERFACE_VTABLE_STATIC_VARIABLE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC));\
    this->strong_rc = src->strong_rc; src->strong_rc = 1u;\
    this->weak_rc = src->weak_rc; src->weak_rc = 0u;\
    return this;\
}\
DEFINE_DEFAULT_ASSIGNMENT_METHODS_WITH_MODIFIER(MODIFIER, RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC))\
MODIFIER void\
    RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC_METHOD(STRONG_RC, WEAK_RC, swap)(\
        RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)* const this,\
        RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)* const src) {\
    ASSERT(this);\
    ASSERT(src);\
    TYPE_METHOD(STRONG_RC, swap)(&this->strong_rc, &src->strong_rc);\
    TYPE_METHOD(WEAK_RC, swap)(&this->weak_rc, &src->weak_rc);\
}\
MODIFIER void*\
    RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC_METHOD(STRONG_RC, WEAK_RC, destroy_at)(\
        struct RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)* const this) {\
    ASSERT(this);\
    ASSERT(this->INTERFACE_VTABLE_VARIABLE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)));\
    ASSERT(this->INTERFACE_VTABLE_VARIABLE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC))->destroy_at);\
    return this->INTERFACE_VTABLE_VARIABLE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC))->destroy_at(this);\
}\
MODIFIER void\
    RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC_METHOD(STRONG_RC, WEAK_RC, dispose_value)(\
        struct RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)* const this) {\
    ASSERT(this);\
    ASSERT(this->INTERFACE_VTABLE_VARIABLE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)));\
    ASSERT(this->INTERFACE_VTABLE_VARIABLE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC))->dispose_value);\
    this->INTERFACE_VTABLE_VARIABLE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC))->dispose_value(this);\
}\
MODIFIER void\
    RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC_METHOD(STRONG_RC, WEAK_RC, dispose_this)(\
        struct RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)* const this) {\
    ASSERT(this);\
    ASSERT(this->INTERFACE_VTABLE_VARIABLE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)));\
    ASSERT(this->INTERFACE_VTABLE_VARIABLE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC))->dispose_this);\
    this->INTERFACE_VTABLE_VARIABLE(RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC))->dispose_this(this);\
}\
MODIFIER void*\
    RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC_METHOD(STRONG_RC, WEAK_RC, VTABLE_MEMBER(destroy_at))(\
        struct RC_CTRL_BLOCK_INTERFACE_TYPE__STRONG_RC__WEAK_RC(STRONG_RC, WEAK_RC)* const this) {\
    ASSERT(this);\
    return this;\
}

/// struct rc<*, StrongRC=usize, WeakRC=usize>::CtrlBlockInterface methods definition
#define DEFINE_RC_CTRL_BLOCK_INTERFACE_METHODS_WITH_MODIFIER(MODIFIER)\
    DEFINE_RC_CTRL_BLOCK_INTERFACE__STRONG_RC__WEAK_RC_METHODS_WITH_MODIFIER(MODIFIER, usize, usize)

// declare default ctrl blocks with default interface
DEFINE_RC_CTRL_BLOCK_INTERFACE_VTABLE_TYPE();
DECLARE_RC_CTRL_BLOCK_INTERFACE_VTABLE_VARIABLE_WITH_MODIFIER(extern);
DEFINE_RC_CTRL_BLOCK_INTERFACE_TYPE();
DECLARE_RC_CTRL_BLOCK_INTERFACE_METHODS_WITH_MODIFIER(extern);
