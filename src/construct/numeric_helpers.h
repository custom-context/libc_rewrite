#pragma once

#include <primitives/unsigned_types_aliases.h>
#include <utils/macros.h>

// TYPE_METHOD(#type, construct_at)
// TYPE_METHOD(#type, construct_copy_at),
// TYPE_METHOD(#type, construct_move_at),
// TYPE_METHOD(#type, destroy_at),
// TYPE_METHOD(#type, assign_copy_at),
// TYPE_METHOD(#type, assign_move_at),
// TYPE_METHOD(#type, swap) for numeric types
#define DECLARE_CONSTRUCT_AT_FOR_NUMERIC_TYPE(TYPE) \
TYPE* TYPE_METHOD(TYPE, construct_at)(TYPE* const ptr)

#define DECLARE_COPY_CONSTRUCT_AT_FOR_NUMERIC_TYPE(TYPE) \
TYPE* TYPE_METHOD(TYPE, construct_copy_at)(TYPE* const ptr, TYPE const* const src)

#define DECLARE_MOVE_CONSTRUCT_AT_FOR_NUMERIC_TYPE(TYPE) \
TYPE* TYPE_METHOD(TYPE, construct_move_at)(TYPE* const ptr, TYPE* const src)

#define DECLARE_DESTROY_AT_FOR_NUMERIC_TYPE(TYPE) \
void* TYPE_METHOD(TYPE, destroy_at)(TYPE* const ptr)

#define DECLARE_COPY_ASSIGN_AT_FOR_NUMERIC_TYPE(TYPE) \
TYPE* TYPE_METHOD(TYPE, assign_copy_at)(TYPE* const ptr, TYPE const* const src)

#define DECLARE_MOVE_ASSIGN_AT_FOR_NUMERIC_TYPE(TYPE) \
TYPE* TYPE_METHOD(TYPE, assign_move_at)(TYPE* const ptr, TYPE* const src)

#define DECLARE_SWAP_FOR_NUMERIC_TYPE(TYPE) \
void TYPE_METHOD(TYPE, swap)(TYPE* const ptr1, TYPE* const ptr2)

#define DECLARE_CONSTRUCTORS_AND_DESTRUCTORS_FOR_NUMERIC_TYPE(TYPE) \
DECLARE_CONSTRUCT_AT_FOR_NUMERIC_TYPE(TYPE);\
DECLARE_COPY_CONSTRUCT_AT_FOR_NUMERIC_TYPE(TYPE);\
DECLARE_MOVE_CONSTRUCT_AT_FOR_NUMERIC_TYPE(TYPE);\
DECLARE_DESTROY_AT_FOR_NUMERIC_TYPE(TYPE);\
DECLARE_COPY_ASSIGN_AT_FOR_NUMERIC_TYPE(TYPE);\
DECLARE_MOVE_ASSIGN_AT_FOR_NUMERIC_TYPE(TYPE);\
DECLARE_SWAP_FOR_NUMERIC_TYPE(TYPE)

#define IMPLEMENT_CONSTRUCT_AT_FOR_NUMERIC_TYPE(TYPE) \
TYPE* TYPE_METHOD(TYPE, construct_at)(TYPE* const ptr) { \
	*ptr = 0; \
	return ptr; \
}

#define IMPLEMENT_COPY_CONSTRUCT_AT_FOR_NUMERIC_TYPE(TYPE) \
TYPE* TYPE_METHOD(TYPE, construct_copy_at)(TYPE* const ptr, TYPE const* const src) { \
	*ptr = *src; \
	return ptr; \
}

#define IMPLEMENT_MOVE_CONSTRUCT_AT_FOR_NUMERIC_TYPE(TYPE) \
TYPE* TYPE_METHOD(TYPE, construct_move_at)(TYPE* const ptr, TYPE* const src) { \
	return TYPE_METHOD(TYPE, construct_copy_at)(ptr, src); \
}

#define IMPLEMENT_DESTROY_AT_FOR_NUMERIC_TYPE(TYPE) \
void* TYPE_METHOD(TYPE, destroy_at)(TYPE* const ptr) { \
	return ptr; \
}

#define IMPLEMENT_COPY_ASSIGN_AT_FOR_NUMERIC_TYPE(TYPE) \
TYPE* TYPE_METHOD(TYPE, assign_copy_at)(TYPE* const ptr, TYPE const* const src) {\
	return TYPE_METHOD(TYPE, construct_copy_at)(ptr, src);\
}

#define IMPLEMENT_MOVE_ASSIGN_AT_FOR_NUMERIC_TYPE(TYPE) \
TYPE* TYPE_METHOD(TYPE, assign_move_at)(TYPE* const ptr, TYPE* const src) {\
	return TYPE_METHOD(TYPE, construct_move_at)(ptr, src);\
}

#define IMPLEMENT_SWAP_FOR_NUMERIC_TYPE(TYPE) \
void TYPE_METHOD(TYPE, swap)(TYPE* const ptr1, TYPE* const ptr2) {\
	TYPE temporary = *ptr1;\
	*ptr1 = *ptr2;\
	*ptr2 = temporary;\
}

#define IMPLEMENT_CONSTRUCTORS_AND_DESTRUCTORS_FOR_NUMERIC_TYPE(TYPE) \
IMPLEMENT_CONSTRUCT_AT_FOR_NUMERIC_TYPE(TYPE)\
IMPLEMENT_COPY_CONSTRUCT_AT_FOR_NUMERIC_TYPE(TYPE)\
IMPLEMENT_MOVE_CONSTRUCT_AT_FOR_NUMERIC_TYPE(TYPE)\
IMPLEMENT_DESTROY_AT_FOR_NUMERIC_TYPE(TYPE)\
IMPLEMENT_COPY_ASSIGN_AT_FOR_NUMERIC_TYPE(TYPE)\
IMPLEMENT_MOVE_ASSIGN_AT_FOR_NUMERIC_TYPE(TYPE)\
IMPLEMENT_SWAP_FOR_NUMERIC_TYPE(TYPE)

DECLARE_CONSTRUCTORS_AND_DESTRUCTORS_FOR_NUMERIC_TYPE(char);
DECLARE_CONSTRUCTORS_AND_DESTRUCTORS_FOR_NUMERIC_TYPE(short);
DECLARE_CONSTRUCTORS_AND_DESTRUCTORS_FOR_NUMERIC_TYPE(int);
DECLARE_CONSTRUCTORS_AND_DESTRUCTORS_FOR_NUMERIC_TYPE(long);
DECLARE_CONSTRUCTORS_AND_DESTRUCTORS_FOR_NUMERIC_TYPE(uchar);
DECLARE_CONSTRUCTORS_AND_DESTRUCTORS_FOR_NUMERIC_TYPE(ushort);
DECLARE_CONSTRUCTORS_AND_DESTRUCTORS_FOR_NUMERIC_TYPE(uint);
DECLARE_CONSTRUCTORS_AND_DESTRUCTORS_FOR_NUMERIC_TYPE(ulong);
DECLARE_CONSTRUCTORS_AND_DESTRUCTORS_FOR_NUMERIC_TYPE(float);
DECLARE_CONSTRUCTORS_AND_DESTRUCTORS_FOR_NUMERIC_TYPE(double);
