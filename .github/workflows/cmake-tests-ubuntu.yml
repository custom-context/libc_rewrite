name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: sudo apt install clang

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -DCMAKE_C_COMPILER=/usr/bin/clang -B ${{github.workspace}}/build-tests -S ${{github.workspace}}/tests -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build tests
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build-tests --config ${{env.BUILD_TYPE}}

    - name: Run tests
      id: run_tests
      working-directory: ${{github.workspace}}/build-tests
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: If some tests failed show logs
      if: ${{ failure() && steps.run_tests.conclusion == 'failure' }}
      working-directory: ${{github.workspace}}/build-tests
      run: ctest -C ${{env.BUILD_TYPE}} --rerun-failed --output-on-failure
